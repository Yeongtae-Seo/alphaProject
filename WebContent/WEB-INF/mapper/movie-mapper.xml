<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="movie">

	<!-- 1.관리자 - 영화 데이터 입력 -->
	<insert id="addMovie" parameterType="com.model.MovieDetailVo">
		insert into movie values(movie_detail_seq.nextval,#{moviename},#{release},#{ratingcode},#{genrecode},0,#{synopsis},#{cast},#{url},#{now})
	</insert>
	
	<!-- 2.관리자 - 영화 데이터 수정 -->
	<update id="updateMovie" parameterType="com.model.MovieDetailVo">
		update movie_detail set moviename=#{moviename},release=#{release},rating=#{ratingcode},genre=#{genrecode},synopsis=#{synopsis},cast=#{cast},url=#{url},now=#{now} where num=#{num}
	</update>

	<!-- 3.관리자 - 영화 데이터 삭제 -->
	<delete id="deleteMovie" parameterType="java.lang.Integer" >
		delete from movie where num=#{num}
	</delete>
	
	<!-- 4.영화 상세 정보 가져오기 -->
	<select id="getMovie" resultType="java.util.HashMap">
		select sub.*,g.genre from(select d.*,r.rating from 
		(select * from movie_Detail) d left join rating r on d.ratingcode = r.id)sub
		left join genre g on sub.genrecode=g.id where sub.num=#{num}
	</select>
	
	<!-- 5.평점순 가져오기-->
	<select id="getMovieGrade" resultType="java.util.HashMap">
		select * from (select a.num, a.moviename,a.grade,r.rating from (select * from movie_detail) 
		a left join rating r on a.ratingcode = r.id) u left join movie_image b on b.parent = u.num order by u.grade desc
	</select>
	
	<!-- 6.영화 장르 가져오기 -->
	<select id="getGenre" resultType="java.util.HashMap">
		select * from genre
	</select>
	
	<!-- 7.영화 관람등급 가져오기 -->
	<select id="getRating" resultType="java.util.HashMap">
		select * from rating 
	</select>
	
	<!-- 8.mongoDB 리뷰 등록 -->
	<insert id="addReview" parameterType="java.util.HashMap">
		db.reviewTest.insertOne({"num":"#{num}","email":"#{email}","grade":"#{grade}","comments":"#{comments}","username":"#{username}","regdate":"#{regdate}"})
	</insert>
	
	<!-- 9.mongoDB 리뷰 가져오기  -->
	<select id="getReview" resultType="java.util.ArrayList">
		db.reviewTest.find({"num":{"$eq":"#{num}"}})
	</select>
	
	<!-- 10.영화 평점 처리 -->
	<update id="setGradeInc" parameterType="java.util.HashMap">
		db.gradeInc.updateOne({"num":"#{num}"},{"$inc":{"grade":"#{grade}","cnt":"#{cnt}"}});
	</update>
	
	<!-- 11.평점 처리용 DB에 영화번호가 존재하는지 확인 -->
	<select id="findGradeInc" resultType="java.util.ArrayList">
		db.gradeInc.find({"num":"#{num}"});
	</select>
	
	<!-- 12.평점 처리용 DB에 데이터 삽입 -->
	<insert id="addGradeInc" parameterType="java.util.HashMap">
		db.gradeInc.insertOne({"num":"#{num}","grade":"#{grade}","cnt":"#{cnt}"})
	</insert>
	
	<!-- 13.리뷰 작성 기록이 있는지 확인 -->
	<select id="findReview" parameterType="java.util.HashMap">
		db.reviewTest.find({"email":"#{email}", "num":"#{num}"});
	</select>
	
</mapper>



